// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  todos          Todo[]
  participations Participant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id          String      @id @default(cuid())
  title       String
  description String?
  deadline    DateTime?
  location    String?
  link        String?
  closed      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ownerId     String
  owner       Participant @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Instead of directyly referencing user, participant model which can 
  // have a user and gives use the possibilty for public meetings and private ones which
  // would need a invitation or something like that.
  participants Participant[]
  // TODO: Votes
  // TODO: Comments
}

model Participant {
  id            String    @id @default(cuid())
  username      String?
  meetingId     String?
  meeting       Meeting?  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ownedMeetings Meeting[] @relation(name: "owner")
}
